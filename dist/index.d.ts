import chunks from "@/chunks";
import clean from "@/clean";
import cloneClass from "@/cloneClass";
import cloneDeep from "@/cloneDeep";
import debounce from "@/debounce";
import diff from "@/diff";
import difference from "@/difference";
import groupBy from "@/groupBy";
import intersection from "@/intersection";
import isBrowser from "@/isBrowser";
import isClass from "@/isClass";
import isEmpty from "@/isEmpty";
import isFunction from "@/isFunction";
import isObject from "@/isObject";
import merge from "@/merge";
import omit from "@/omit";
import pick from "@/pick";
import pickBy from "@/pickBy";
import pull from "@/pull";
import pullAll from "@/pullAll";
import rand from "@/rand";
import replace from "@/replace";
import throttle from "@/throttle";
export { chunks, clean, cloneClass, cloneDeep, debounce, diff, difference, groupBy, intersection, isBrowser, isClass, isEmpty, isFunction, isObject, merge, omit, pick, pickBy, pull, pullAll, rand, replace, throttle };
declare const _default: {
    chunks: (arr: any[], size: number) => any[][];
    clean: typeof clean;
    cloneClass: (cloneClass: new (...args: any[]) => any) => new (...args: any[]) => any;
    cloneDeep: typeof cloneDeep;
    debounce: (func: CallableFunction, wait?: number, immediate?: boolean) => CallableFunction;
    diff: typeof diff;
    difference: <T>(arr: T[], rm: any[]) => T[];
    groupBy: (arr: any[], criteria: string | number | ((v: any) => string | number)) => Record<string, any>;
    intersection: (...arrays: any[][]) => any[];
    isBrowser: () => any;
    isClass: (target: any) => boolean;
    isEmpty: (obj: any[] | Record<string, any>) => boolean;
    isFunction: (fn: any) => boolean;
    isObject: (obj: any) => boolean;
    merge: typeof merge;
    omit: (obj: Record<string, any>, blacklist: string[]) => Record<string, any>;
    pick: <T_1 extends string>(o: Record<string, any>, keys: T_1[]) => Record<T_1, any>;
    pickBy: (object: Record<string, any>, predicate?: (v: any, k: string) => boolean) => Record<string, any>;
    pull: (arr: any[], ...removeList: any[]) => any[];
    pullAll: (arr: any[], removeList: any[]) => any[];
    rand: (min: number, max: number) => number;
    replace: typeof replace;
    throttle: (callback: CallableFunction, wait?: number, immediate?: boolean) => CallableFunction;
};
export default _default;
